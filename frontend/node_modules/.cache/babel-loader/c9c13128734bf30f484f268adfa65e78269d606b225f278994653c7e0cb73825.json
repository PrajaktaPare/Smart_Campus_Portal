{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\nconst instance = axios.create({\n  baseURL: API_BASE_URL\n});\ninstance.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport const authService = {\n  login: data => instance.post(\"/auth/login\", data),\n  register: data => instance.post(\"/auth/register\", data)\n};\nexport const userService = {\n  getAllUsers: () => instance.get(\"/users\"),\n  getProfile: () => instance.get(\"/users/profile\"),\n  updateProfile: data => instance.put(\"/users/profile\", data)\n};\nexport const courseService = {\n  getCourses: () => instance.get(\"/courses\"),\n  getCourse: id => instance.get(`/courses/${id}`)\n};\nexport const eventService = {\n  getEvents: () => instance.get(\"/events\"),\n  createEvent: data => instance.post(\"/events\", data),\n  rsvpEvent: eventId => instance.post(`/events/${eventId}/rsvp`),\n  deleteEvent: eventId => instance.delete(`/events/${eventId}`)\n};\nexport const attendanceService = {\n  getAttendance: studentId => instance.get(`/attendance/${studentId}`)\n};\nexport const gradeService = {\n  getGrades: studentId => instance.get(`/grades/${studentId}`)\n};\nexport const placementService = {\n  getPlacements: studentId => instance.get(`/placements/${studentId}`),\n  getAllPlacements: () => instance.get(\"/placements\"),\n  updatePlacement: (id, data) => instance.put(`/placements/${id}`, data)\n};\nexport const notificationService = {\n  getNotifications: userId => instance.get(`/notifications/${userId}`),\n  markAsRead: notificationId => instance.put(`/notifications/${notificationId}/read`)\n};\nexport const assignmentService = {\n  getAssignments: () => instance.get(\"/assignments\"),\n  createAssignment: data => instance.post(\"/assignments\", data),\n  submitAssignment: (id, data) => instance.post(`/assignments/${id}/submit`, data)\n};\nexport const announcementService = {\n  getAnnouncements: () => instance.get(\"/announcements\"),\n  createAnnouncement: data => instance.post(\"/announcements\", data)\n};\nexport default instance;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","instance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","authService","login","data","post","register","userService","getAllUsers","get","getProfile","updateProfile","put","courseService","getCourses","getCourse","id","eventService","getEvents","createEvent","rsvpEvent","eventId","deleteEvent","delete","attendanceService","getAttendance","studentId","gradeService","getGrades","placementService","getPlacements","getAllPlacements","updatePlacement","notificationService","getNotifications","userId","markAsRead","notificationId","assignmentService","getAssignments","createAssignment","submitAssignment","announcementService","getAnnouncements","createAnnouncement"],"sources":["C:/Users/praja/Downloads/fullapp/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\"\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\"\n\nconst instance = axios.create({\n  baseURL: API_BASE_URL,\n})\n\ninstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\")\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  (error) => Promise.reject(error),\n)\n\nexport const authService = {\n  login: (data) => instance.post(\"/auth/login\", data),\n  register: (data) => instance.post(\"/auth/register\", data),\n}\n\nexport const userService = {\n  getAllUsers: () => instance.get(\"/users\"),\n  getProfile: () => instance.get(\"/users/profile\"),\n  updateProfile: (data) => instance.put(\"/users/profile\", data),\n}\n\nexport const courseService = {\n  getCourses: () => instance.get(\"/courses\"),\n  getCourse: (id) => instance.get(`/courses/${id}`),\n}\n\nexport const eventService = {\n  getEvents: () => instance.get(\"/events\"),\n  createEvent: (data) => instance.post(\"/events\", data),\n  rsvpEvent: (eventId) => instance.post(`/events/${eventId}/rsvp`),\n  deleteEvent: (eventId) => instance.delete(`/events/${eventId}`),\n}\n\nexport const attendanceService = {\n  getAttendance: (studentId) => instance.get(`/attendance/${studentId}`),\n}\n\nexport const gradeService = {\n  getGrades: (studentId) => instance.get(`/grades/${studentId}`),\n}\n\nexport const placementService = {\n  getPlacements: (studentId) => instance.get(`/placements/${studentId}`),\n  getAllPlacements: () => instance.get(\"/placements\"),\n  updatePlacement: (id, data) => instance.put(`/placements/${id}`, data),\n}\n\nexport const notificationService = {\n  getNotifications: (userId) => instance.get(`/notifications/${userId}`),\n  markAsRead: (notificationId) => instance.put(`/notifications/${notificationId}/read`),\n}\n\nexport const assignmentService = {\n  getAssignments: () => instance.get(\"/assignments\"),\n  createAssignment: (data) => instance.post(\"/assignments\", data),\n  submitAssignment: (id, data) => instance.post(`/assignments/${id}/submit`, data),\n}\n\nexport const announcementService = {\n  getAnnouncements: () => instance.get(\"/announcements\"),\n  createAnnouncement: (data) => instance.post(\"/announcements\", data),\n}\n\nexport default instance\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
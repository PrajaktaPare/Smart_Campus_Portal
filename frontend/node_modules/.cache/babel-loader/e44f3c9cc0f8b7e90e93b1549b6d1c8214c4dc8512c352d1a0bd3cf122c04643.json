{"ast":null,"code":"// Mock data for users\nconst mockUsers = [{\n  _id: \"1\",\n  name: \"Admin User\",\n  email: \"admin@edu.com\",\n  role: \"admin\"\n}, {\n  _id: \"2\",\n  name: \"Dr. Smith\",\n  email: \"faculty@edu.com\",\n  role: \"faculty\"\n}, {\n  _id: \"3\",\n  name: \"John Doe\",\n  email: \"student@edu.com\",\n  role: \"student\"\n}, {\n  _id: \"4\",\n  name: \"Jane Smith\",\n  email: \"jane@edu.com\",\n  role: \"student\"\n}, {\n  _id: \"5\",\n  name: \"Bob Johnson\",\n  email: \"bob@edu.com\",\n  role: \"student\"\n}, {\n  _id: \"6\",\n  name: \"Dr. Williams\",\n  email: \"williams@edu.com\",\n  role: \"faculty\"\n}];\n\n// Mock data for courses\nconst mockCourses = [{\n  _id: \"101\",\n  code: \"CS101\",\n  title: \"Introduction to Computer Science\",\n  description: \"A foundational course covering basic concepts in computer science.\",\n  instructor: {\n    _id: \"2\",\n    name: \"Dr. Smith\",\n    email: \"faculty@edu.com\"\n  },\n  semester: \"Fall\",\n  year: 2023,\n  credits: 3,\n  students: [{\n    _id: \"3\",\n    name: \"John Doe\",\n    email: \"student@edu.com\"\n  }, {\n    _id: \"4\",\n    name: \"Jane Smith\",\n    email: \"jane@edu.com\"\n  }]\n}, {\n  _id: \"102\",\n  code: \"CS201\",\n  title: \"Data Structures\",\n  description: \"Advanced course covering various data structures and their applications.\",\n  instructor: {\n    _id: \"2\",\n    name: \"Dr. Smith\",\n    email: \"faculty@edu.com\"\n  },\n  semester: \"Spring\",\n  year: 2023,\n  credits: 4,\n  students: [{\n    _id: \"3\",\n    name: \"John Doe\",\n    email: \"student@edu.com\"\n  }, {\n    _id: \"5\",\n    name: \"Bob Johnson\",\n    email: \"bob@edu.com\"\n  }]\n}, {\n  _id: \"103\",\n  code: \"CS301\",\n  title: \"Database Systems\",\n  description: \"Introduction to database design, implementation, and management.\",\n  instructor: {\n    _id: \"6\",\n    name: \"Dr. Williams\",\n    email: \"williams@edu.com\"\n  },\n  semester: \"Fall\",\n  year: 2023,\n  credits: 3,\n  students: [{\n    _id: \"4\",\n    name: \"Jane Smith\",\n    email: \"jane@edu.com\"\n  }, {\n    _id: \"5\",\n    name: \"Bob Johnson\",\n    email: \"bob@edu.com\"\n  }]\n}];\n\n// Mock data for grades\nconst mockGrades = [{\n  _id: \"g1\",\n  studentId: \"3\",\n  course: \"Introduction to Computer Science\",\n  grade: \"A\",\n  semester: \"Fall 2023\"\n}, {\n  _id: \"g2\",\n  studentId: \"3\",\n  course: \"Data Structures\",\n  grade: \"B+\",\n  semester: \"Spring 2023\"\n}, {\n  _id: \"g3\",\n  studentId: \"4\",\n  course: \"Introduction to Computer Science\",\n  grade: \"A-\",\n  semester: \"Fall 2023\"\n}, {\n  _id: \"g4\",\n  studentId: \"4\",\n  course: \"Database Systems\",\n  grade: \"B\",\n  semester: \"Fall 2023\"\n}, {\n  _id: \"g5\",\n  studentId: \"5\",\n  course: \"Data Structures\",\n  grade: \"A\",\n  semester: \"Spring 2023\"\n}, {\n  _id: \"g6\",\n  studentId: \"5\",\n  course: \"Database Systems\",\n  grade: \"B+\",\n  semester: \"Fall 2023\"\n}];\n\n// Mock data for attendance\nconst mockAttendance = [{\n  course: {\n    _id: \"101\",\n    code: \"CS101\",\n    title: \"Introduction to Computer Science\"\n  },\n  totalClasses: 15,\n  present: 14,\n  absent: 1,\n  percentage: 93\n}, {\n  course: {\n    _id: \"102\",\n    code: \"CS201\",\n    title: \"Data Structures\"\n  },\n  totalClasses: 12,\n  present: 10,\n  absent: 2,\n  percentage: 83\n}];\n\n// Mock data for assignments\nconst mockAssignments = [{\n  _id: \"a1\",\n  title: \"Introduction to Programming\",\n  description: \"Write a simple program to calculate factorial of a number\",\n  course: {\n    _id: \"101\",\n    code: \"CS101\",\n    title: \"Introduction to Computer Science\"\n  },\n  dueDate: new Date(2023, 8, 30),\n  totalMarks: 20,\n  createdBy: {\n    _id: \"2\",\n    name: \"Dr. Smith\"\n  },\n  createdAt: new Date(2023, 8, 15),\n  submission: null,\n  status: \"pending\"\n}, {\n  _id: \"a2\",\n  title: \"Data Structures Implementation\",\n  description: \"Implement a linked list with basic operations\",\n  course: {\n    _id: \"102\",\n    code: \"CS201\",\n    title: \"Data Structures\"\n  },\n  dueDate: new Date(2023, 9, 15),\n  totalMarks: 30,\n  createdBy: {\n    _id: \"2\",\n    name: \"Dr. Smith\"\n  },\n  createdAt: new Date(2023, 9, 1),\n  submission: {\n    status: \"submitted\",\n    submittedAt: new Date(2023, 9, 10),\n    marks: 25\n  },\n  status: \"submitted\"\n}, {\n  _id: \"a3\",\n  title: \"Database Design\",\n  description: \"Design a database schema for a library management system\",\n  course: {\n    _id: \"103\",\n    code: \"CS301\",\n    title: \"Database Systems\"\n  },\n  dueDate: new Date(2023, 10, 10),\n  totalMarks: 25,\n  createdBy: {\n    _id: \"6\",\n    name: \"Dr. Williams\"\n  },\n  createdAt: new Date(2023, 10, 1),\n  submission: null,\n  status: \"pending\"\n}];\n\n// Mock data for events\nconst mockEvents = [{\n  _id: \"e1\",\n  title: \"Orientation Day\",\n  description: \"Welcome orientation for new students\",\n  date: new Date(2023, 8, 15, 10, 0),\n  location: \"Main Auditorium\",\n  organizer: {\n    _id: \"1\",\n    name: \"Admin User\"\n  },\n  rsvped: true\n}, {\n  _id: \"e2\",\n  title: \"Tech Symposium\",\n  description: \"Annual technology symposium featuring guest speakers from industry\",\n  date: new Date(2023, 9, 20, 14, 0),\n  location: \"Conference Hall\",\n  organizer: {\n    _id: \"2\",\n    name: \"Dr. Smith\"\n  },\n  rsvped: false\n}, {\n  _id: \"e3\",\n  title: \"Career Fair\",\n  description: \"Meet representatives from top companies\",\n  date: new Date(2023, 10, 5, 9, 0),\n  location: \"Sports Complex\",\n  organizer: {\n    _id: \"6\",\n    name: \"Dr. Williams\"\n  },\n  rsvped: false\n}];\n\n// Mock data for notifications\nconst mockNotifications = [{\n  _id: \"n1\",\n  title: \"Assignment Due\",\n  message: \"Reminder: Your CS101 assignment is due tomorrow\",\n  type: \"assignment\",\n  sender: {\n    _id: \"2\",\n    name: \"Dr. Smith\"\n  },\n  read: false,\n  createdAt: new Date(2023, 8, 29)\n}, {\n  _id: \"n2\",\n  title: \"Event Reminder\",\n  message: \"Don't forget about the Orientation Day tomorrow\",\n  type: \"event\",\n  sender: {\n    _id: \"1\",\n    name: \"Admin User\"\n  },\n  read: false,\n  createdAt: new Date(2023, 8, 14)\n}, {\n  _id: \"n3\",\n  title: \"Grade Posted\",\n  message: \"Your grade for CS201 has been posted\",\n  type: \"grade\",\n  sender: {\n    _id: \"2\",\n    name: \"Dr. Smith\"\n  },\n  read: true,\n  createdAt: new Date(2023, 7, 20)\n}, {\n  _id: \"n4\",\n  title: \"Course Enrollment\",\n  message: \"You have been enrolled in Database Systems\",\n  type: \"system\",\n  sender: {\n    _id: \"1\",\n    name: \"Admin User\"\n  },\n  read: true,\n  createdAt: new Date(2023, 7, 15)\n}, {\n  _id: \"n5\",\n  title: \"Attendance Warning\",\n  message: \"Your attendance in CS101 is below 85%\",\n  type: \"attendance\",\n  sender: {\n    _id: \"2\",\n    name: \"Dr. Smith\"\n  },\n  read: false,\n  createdAt: new Date(2023, 8, 10)\n}];\n\n// Mock data for announcements\nconst mockAnnouncements = [{\n  _id: \"an1\",\n  title: \"Campus Closure\",\n  content: \"Campus will be closed on October 10th for maintenance\",\n  createdAt: new Date(2023, 9, 5)\n}, {\n  _id: \"an2\",\n  title: \"New Library Hours\",\n  content: \"The library will now be open 24/7 during exam week\",\n  createdAt: new Date(2023, 8, 20)\n}, {\n  _id: \"an3\",\n  title: \"Scholarship Applications\",\n  content: \"Scholarship applications for the next academic year are now open\",\n  createdAt: new Date(2023, 8, 15)\n}];\n\n// Mock data for placements\nconst mockPlacements = [{\n  _id: \"p1\",\n  studentId: \"3\",\n  studentName: \"John Doe\",\n  company: \"Google\",\n  role: \"Software Engineer\",\n  status: \"Placed\"\n}, {\n  _id: \"p2\",\n  studentId: \"4\",\n  studentName: \"Jane Smith\",\n  company: \"Microsoft\",\n  role: \"Data Scientist\",\n  status: \"Interview\"\n}, {\n  _id: \"p3\",\n  studentId: \"5\",\n  studentName: \"Bob Johnson\",\n  company: \"Amazon\",\n  role: \"Product Manager\",\n  status: \"Applied\"\n}];\n\n// Mock API service\nconst mockAPI = {\n  // Auth services\n  login: async data => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const {\n      email,\n      password\n    } = data;\n    const user = mockUsers.find(u => u.email === email);\n    if (!user || password !== \"password\") {\n      throw {\n        response: {\n          data: {\n            message: \"Invalid email or password\"\n          }\n        }\n      };\n    }\n    return {\n      data: {\n        token: \"mock-jwt-token\",\n        user: {\n          id: user._id,\n          name: user.name,\n          email: user.email,\n          role: user.role\n        }\n      }\n    };\n  },\n  register: async data => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const {\n      email\n    } = data;\n    const existingUser = mockUsers.find(u => u.email === email);\n    if (existingUser) {\n      throw {\n        response: {\n          data: {\n            message: \"User already exists\"\n          }\n        }\n      };\n    }\n    const newUser = {\n      _id: `${mockUsers.length + 1}`,\n      ...data\n    };\n    mockUsers.push(newUser);\n    return {\n      data: {\n        token: \"mock-jwt-token\",\n        user: {\n          id: newUser._id,\n          name: newUser.name,\n          email: newUser.email,\n          role: newUser.role\n        }\n      }\n    };\n  },\n  // User services\n  getAllUsers: async () => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockUsers\n    };\n  },\n  getProfile: async () => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    const foundUser = mockUsers.find(u => u.email === user.email);\n    return {\n      data: foundUser\n    };\n  },\n  updateProfile: async data => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    const userIndex = mockUsers.findIndex(u => u.email === user.email);\n    if (userIndex !== -1) {\n      mockUsers[userIndex] = {\n        ...mockUsers[userIndex],\n        ...data\n      };\n      return {\n        data: mockUsers[userIndex]\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"User not found\"\n        }\n      }\n    };\n  },\n  getStudents: async () => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockUsers.filter(u => u.role === \"student\")\n    };\n  },\n  getFaculty: async () => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockUsers.filter(u => u.role === \"faculty\")\n    };\n  },\n  createUser: async data => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const {\n      email\n    } = data;\n    const existingUser = mockUsers.find(u => u.email === email);\n    if (existingUser) {\n      throw {\n        response: {\n          data: {\n            message: \"User already exists\"\n          }\n        }\n      };\n    }\n    const newUser = {\n      _id: `${mockUsers.length + 1}`,\n      ...data\n    };\n    mockUsers.push(newUser);\n    return {\n      data: newUser\n    };\n  },\n  getUserById: async id => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const user = mockUsers.find(u => u._id === id);\n    if (!user) {\n      throw {\n        response: {\n          data: {\n            message: \"User not found\"\n          }\n        }\n      };\n    }\n    return {\n      data: user\n    };\n  },\n  updateUser: async (id, data) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const userIndex = mockUsers.findIndex(u => u._id === id);\n    if (userIndex !== -1) {\n      mockUsers[userIndex] = {\n        ...mockUsers[userIndex],\n        ...data\n      };\n      return {\n        data: mockUsers[userIndex]\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"User not found\"\n        }\n      }\n    };\n  },\n  deleteUser: async id => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const userIndex = mockUsers.findIndex(u => u._id === id);\n    if (userIndex !== -1) {\n      mockUsers.splice(userIndex, 1);\n      return {\n        data: {\n          message: \"User deleted successfully\"\n        }\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"User not found\"\n        }\n      }\n    };\n  },\n  // Course services\n  getCourses: async () => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockCourses\n    };\n  },\n  getAllCourses: async () => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockCourses\n    };\n  },\n  getCourse: async id => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const course = mockCourses.find(c => c._id === id);\n    if (!course) {\n      throw {\n        response: {\n          data: {\n            message: \"Course not found\"\n          }\n        }\n      };\n    }\n    return {\n      data: course\n    };\n  },\n  getCourseById: async id => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const course = mockCourses.find(c => c._id === id);\n    if (!course) {\n      throw {\n        response: {\n          data: {\n            message: \"Course not found\"\n          }\n        }\n      };\n    }\n    return {\n      data: course\n    };\n  },\n  createCourse: async data => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const {\n      code\n    } = data;\n    const existingCourse = mockCourses.find(c => c.code === code);\n    if (existingCourse) {\n      throw {\n        response: {\n          data: {\n            message: \"Course with this code already exists\"\n          }\n        }\n      };\n    }\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    const instructor = mockUsers.find(u => u.email === user.email);\n    const newCourse = {\n      _id: `${Number.parseInt(mockCourses[mockCourses.length - 1]._id) + 1}`,\n      ...data,\n      instructor: {\n        _id: instructor._id,\n        name: instructor.name,\n        email: instructor.email\n      },\n      students: []\n    };\n    mockCourses.push(newCourse);\n    return {\n      data: newCourse\n    };\n  },\n  updateCourse: async (id, data) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const courseIndex = mockCourses.findIndex(c => c._id === id);\n    if (courseIndex !== -1) {\n      mockCourses[courseIndex] = {\n        ...mockCourses[courseIndex],\n        ...data\n      };\n      return {\n        data: mockCourses[courseIndex]\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Course not found\"\n        }\n      }\n    };\n  },\n  deleteCourse: async id => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const courseIndex = mockCourses.findIndex(c => c._id === id);\n    if (courseIndex !== -1) {\n      mockCourses.splice(courseIndex, 1);\n      return {\n        data: {\n          message: \"Course deleted successfully\"\n        }\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Course not found\"\n        }\n      }\n    };\n  },\n  enrollStudents: async (courseId, studentIds) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const courseIndex = mockCourses.findIndex(c => c._id === courseId);\n    if (courseIndex !== -1) {\n      const students = mockUsers.filter(u => studentIds.includes(u._id));\n      mockCourses[courseIndex].students = students;\n      return {\n        data: {\n          message: \"Students enrolled successfully\",\n          course: mockCourses[courseIndex]\n        }\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Course not found\"\n        }\n      }\n    };\n  },\n  removeStudents: async (courseId, studentIds) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const courseIndex = mockCourses.findIndex(c => c._id === courseId);\n    if (courseIndex !== -1) {\n      mockCourses[courseIndex].students = mockCourses[courseIndex].students.filter(s => !studentIds.includes(s._id));\n      return {\n        data: {\n          message: \"Students removed successfully\",\n          course: mockCourses[courseIndex]\n        }\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Course not found\"\n        }\n      }\n    };\n  },\n  addCourseMaterial: async (courseId, data) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const courseIndex = mockCourses.findIndex(c => c._id === courseId);\n    if (courseIndex !== -1) {\n      if (!mockCourses[courseIndex].materials) {\n        mockCourses[courseIndex].materials = [];\n      }\n      const material = {\n        _id: `m${mockCourses[courseIndex].materials.length + 1}`,\n        ...data,\n        uploadedAt: new Date()\n      };\n      mockCourses[courseIndex].materials.push(material);\n      return {\n        data: {\n          message: \"Material added successfully\",\n          material\n        }\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Course not found\"\n        }\n      }\n    };\n  },\n  // Event services\n  getEvents: async () => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockEvents\n    };\n  },\n  getEvent: async id => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const event = mockEvents.find(e => e._id === id);\n    if (!event) {\n      throw {\n        response: {\n          data: {\n            message: \"Event not found\"\n          }\n        }\n      };\n    }\n    return {\n      data: event\n    };\n  },\n  createEvent: async data => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    const organizer = mockUsers.find(u => u.email === user.email);\n    const newEvent = {\n      _id: `e${mockEvents.length + 1}`,\n      ...data,\n      organizer: {\n        _id: organizer._id,\n        name: organizer.name\n      },\n      attendees: [],\n      rsvped: false\n    };\n    mockEvents.push(newEvent);\n    return {\n      data: newEvent\n    };\n  },\n  updateEvent: async (id, data) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const eventIndex = mockEvents.findIndex(e => e._id === id);\n    if (eventIndex !== -1) {\n      mockEvents[eventIndex] = {\n        ...mockEvents[eventIndex],\n        ...data\n      };\n      return {\n        data: mockEvents[eventIndex]\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Event not found\"\n        }\n      }\n    };\n  },\n  rsvpEvent: async id => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const eventIndex = mockEvents.findIndex(e => e._id === id);\n    if (eventIndex !== -1) {\n      mockEvents[eventIndex].rsvped = true;\n      return {\n        data: {\n          message: \"RSVP successful\",\n          event: mockEvents[eventIndex]\n        }\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Event not found\"\n        }\n      }\n    };\n  },\n  // Attendance services\n  getStudentAttendance: async studentId => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockAttendance\n    };\n  },\n  getStudentAttendanceStats: async studentId => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockAttendance\n    };\n  },\n  getCourseAttendance: async (courseId, date) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const attendance = mockAttendance.find(a => a.course._id === courseId);\n    if (!attendance) {\n      return {\n        data: []\n      };\n    }\n    return {\n      data: [attendance]\n    };\n  },\n  markAttendance: async (courseId, data) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: {\n        message: \"Attendance marked successfully\"\n      }\n    };\n  },\n  // Grade services\n  getStudentGrades: async studentId => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockGrades.filter(g => g.studentId === studentId)\n    };\n  },\n  getCourseGrades: async courseId => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const course = mockCourses.find(c => c._id === courseId);\n    if (!course) {\n      throw {\n        response: {\n          data: {\n            message: \"Course not found\"\n          }\n        }\n      };\n    }\n    return {\n      data: mockGrades.filter(g => g.course === course.title)\n    };\n  },\n  addGrade: async data => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const newGrade = {\n      _id: `g${mockGrades.length + 1}`,\n      ...data\n    };\n    mockGrades.push(newGrade);\n    return {\n      data: newGrade\n    };\n  },\n  updateGrade: async (id, data) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const gradeIndex = mockGrades.findIndex(g => g._id === id);\n    if (gradeIndex !== -1) {\n      mockGrades[gradeIndex] = {\n        ...mockGrades[gradeIndex],\n        ...data\n      };\n      return {\n        data: mockGrades[gradeIndex]\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Grade not found\"\n        }\n      }\n    };\n  },\n  // Placement services\n  getPlacements: async studentId => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockPlacements.filter(p => p.studentId === studentId)\n    };\n  },\n  getAllPlacements: async () => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockPlacements\n    };\n  },\n  createPlacement: async data => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const newPlacement = {\n      _id: `p${mockPlacements.length + 1}`,\n      ...data\n    };\n    mockPlacements.push(newPlacement);\n    return {\n      data: newPlacement\n    };\n  },\n  updatePlacement: async (id, data) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const placementIndex = mockPlacements.findIndex(p => p._id === id);\n    if (placementIndex !== -1) {\n      mockPlacements[placementIndex] = {\n        ...mockPlacements[placementIndex],\n        ...data\n      };\n      return {\n        data: mockPlacements[placementIndex]\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Placement not found\"\n        }\n      }\n    };\n  },\n  deletePlacement: async id => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const placementIndex = mockPlacements.findIndex(p => p._id === id);\n    if (placementIndex !== -1) {\n      mockPlacements.splice(placementIndex, 1);\n      return {\n        data: {\n          message: \"Placement deleted successfully\"\n        }\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Placement not found\"\n        }\n      }\n    };\n  },\n  // Notification services\n  getUserNotifications: async () => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockNotifications\n    };\n  },\n  markAsRead: async notificationId => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const notificationIndex = mockNotifications.findIndex(n => n._id === notificationId);\n    if (notificationIndex !== -1) {\n      mockNotifications[notificationIndex].read = true;\n      return {\n        data: {\n          message: \"Notification marked as read\"\n        }\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Notification not found\"\n        }\n      }\n    };\n  },\n  markAllAsRead: async () => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    mockNotifications.forEach(notification => {\n      notification.read = true;\n    });\n    return {\n      data: {\n        message: \"All notifications marked as read\"\n      }\n    };\n  },\n  deleteNotification: async notificationId => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const notificationIndex = mockNotifications.findIndex(n => n._id === notificationId);\n    if (notificationIndex !== -1) {\n      mockNotifications.splice(notificationIndex, 1);\n      return {\n        data: {\n          message: \"Notification deleted successfully\"\n        }\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Notification not found\"\n        }\n      }\n    };\n  },\n  createNotification: async data => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    const sender = mockUsers.find(u => u.email === user.email);\n    const newNotification = {\n      _id: `n${mockNotifications.length + 1}`,\n      ...data,\n      sender: {\n        _id: sender._id,\n        name: sender.name\n      },\n      read: false,\n      createdAt: new Date()\n    };\n    mockNotifications.push(newNotification);\n    return {\n      data: newNotification\n    };\n  },\n  // Assignment services\n  getAssignments: async () => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockAssignments\n    };\n  },\n  getAssignment: async id => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const assignment = mockAssignments.find(a => a._id === id);\n    if (!assignment) {\n      throw {\n        response: {\n          data: {\n            message: \"Assignment not found\"\n          }\n        }\n      };\n    }\n    return {\n      data: assignment\n    };\n  },\n  getCourseAssignments: async courseId => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockAssignments.filter(a => a.course._id === courseId)\n    };\n  },\n  getStudentAssignments: async studentId => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockAssignments\n    };\n  },\n  createAssignment: async data => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    const creator = mockUsers.find(u => u.email === user.email);\n    const course = mockCourses.find(c => c._id === data.courseId);\n    if (!course) {\n      throw {\n        response: {\n          data: {\n            message: \"Course not found\"\n          }\n        }\n      };\n    }\n    const newAssignment = {\n      _id: `a${mockAssignments.length + 1}`,\n      title: data.title,\n      description: data.description,\n      course: {\n        _id: course._id,\n        code: course.code,\n        title: course.title\n      },\n      dueDate: data.dueDate,\n      totalMarks: data.totalMarks,\n      createdBy: {\n        _id: creator._id,\n        name: creator.name\n      },\n      createdAt: new Date(),\n      submissions: [],\n      status: \"pending\"\n    };\n    mockAssignments.push(newAssignment);\n    return {\n      data: newAssignment\n    };\n  },\n  submitAssignment: async (assignmentId, data) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const assignmentIndex = mockAssignments.findIndex(a => a._id === assignmentId);\n    if (assignmentIndex !== -1) {\n      mockAssignments[assignmentIndex].submission = {\n        status: \"submitted\",\n        submittedAt: new Date(),\n        content: data.content,\n        attachments: data.attachments || []\n      };\n      mockAssignments[assignmentIndex].status = \"submitted\";\n      return {\n        data: {\n          message: \"Assignment submitted successfully\"\n        }\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Assignment not found\"\n        }\n      }\n    };\n  },\n  gradeSubmission: async (assignmentId, submissionId, data) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const assignmentIndex = mockAssignments.findIndex(a => a._id === assignmentId);\n    if (assignmentIndex !== -1 && mockAssignments[assignmentIndex].submission) {\n      mockAssignments[assignmentIndex].submission.marks = data.marks;\n      mockAssignments[assignmentIndex].submission.feedback = data.feedback;\n      mockAssignments[assignmentIndex].submission.status = \"graded\";\n      mockAssignments[assignmentIndex].status = \"graded\";\n      return {\n        data: {\n          message: \"Submission graded successfully\"\n        }\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Assignment or submission not found\"\n        }\n      }\n    };\n  },\n  // Announcement services\n  getAnnouncements: async () => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: mockAnnouncements\n    };\n  },\n  getAnnouncement: async id => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const announcement = mockAnnouncements.find(a => a._id === id);\n    if (!announcement) {\n      throw {\n        response: {\n          data: {\n            message: \"Announcement not found\"\n          }\n        }\n      };\n    }\n    return {\n      data: announcement\n    };\n  },\n  createAnnouncement: async data => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const newAnnouncement = {\n      _id: `an${mockAnnouncements.length + 1}`,\n      ...data,\n      createdAt: new Date()\n    };\n    mockAnnouncements.push(newAnnouncement);\n    return {\n      data: newAnnouncement\n    };\n  },\n  updateAnnouncement: async (id, data) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const announcementIndex = mockAnnouncements.findIndex(a => a._id === id);\n    if (announcementIndex !== -1) {\n      mockAnnouncements[announcementIndex] = {\n        ...mockAnnouncements[announcementIndex],\n        ...data\n      };\n      return {\n        data: mockAnnouncements[announcementIndex]\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Announcement not found\"\n        }\n      }\n    };\n  },\n  deleteAnnouncement: async id => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const announcementIndex = mockAnnouncements.findIndex(a => a._id === id);\n    if (announcementIndex !== -1) {\n      mockAnnouncements.splice(announcementIndex, 1);\n      return {\n        data: {\n          message: \"Announcement deleted successfully\"\n        }\n      };\n    }\n    throw {\n      response: {\n        data: {\n          message: \"Announcement not found\"\n        }\n      }\n    };\n  }\n};\n\n// Create a real-looking axios instance that uses our mock data\nconst instance = {\n  get: url => {\n    console.log(`Mock GET request to: ${url}`);\n    return Promise.resolve({\n      data: []\n    });\n  },\n  post: (url, data) => {\n    console.log(`Mock POST request to: ${url}`, data);\n    return Promise.resolve({\n      data: {}\n    });\n  },\n  put: (url, data) => {\n    console.log(`Mock PUT request to: ${url}`, data);\n    return Promise.resolve({\n      data: {}\n    });\n  },\n  delete: url => {\n    console.log(`Mock DELETE request to: ${url}`);\n    return Promise.resolve({\n      data: {}\n    });\n  }\n};\n\n// Export the services\nexport const authService = {\n  login: mockAPI.login,\n  register: mockAPI.register\n};\nexport const userService = {\n  getAllUsers: mockAPI.getAllUsers,\n  getProfile: mockAPI.getProfile,\n  updateProfile: mockAPI.updateProfile,\n  getStudents: mockAPI.getStudents,\n  getFaculty: mockAPI.getFaculty,\n  createUser: mockAPI.createUser,\n  getUserById: mockAPI.getUserById,\n  updateUser: mockAPI.updateUser,\n  deleteUser: mockAPI.deleteUser\n};\nexport const courseService = {\n  getCourses: mockAPI.getCourses,\n  getAllCourses: mockAPI.getAllCourses,\n  getCourse: mockAPI.getCourse,\n  getCourseById: mockAPI.getCourseById,\n  createCourse: mockAPI.createCourse,\n  updateCourse: mockAPI.updateCourse,\n  deleteCourse: mockAPI.deleteCourse,\n  enrollStudents: mockAPI.enrollStudents,\n  removeStudents: mockAPI.removeStudents,\n  addCourseMaterial: mockAPI.addCourseMaterial,\n  getCourseAttendance: mockAPI.getCourseAttendance,\n  markAttendance: mockAPI.markAttendance\n};\nexport const eventService = {\n  getEvents: mockAPI.getEvents,\n  getEvent: mockAPI.getEvent,\n  createEvent: mockAPI.createEvent,\n  updateEvent: mockAPI.updateEvent,\n  deleteEvent: mockAPI.deleteEvent,\n  rsvpEvent: mockAPI.rsvpEvent\n};\nexport const attendanceService = {\n  getStudentAttendance: mockAPI.getStudentAttendance,\n  getStudentAttendanceStats: mockAPI.getStudentAttendanceStats,\n  getCourseAttendance: mockAPI.getCourseAttendance,\n  markAttendance: mockAPI.markAttendance\n};\nexport const gradeService = {\n  getStudentGrades: mockAPI.getStudentGrades,\n  getCourseGrades: mockAPI.getCourseGrades,\n  addGrade: mockAPI.addGrade,\n  updateGrade: mockAPI.updateGrade\n};\nexport const placementService = {\n  getPlacements: mockAPI.getPlacements,\n  getAllPlacements: mockAPI.getAllPlacements,\n  createPlacement: mockAPI.createPlacement,\n  updatePlacement: mockAPI.updatePlacement,\n  deletePlacement: mockAPI.deletePlacement\n};\nexport const notificationService = {\n  getUserNotifications: mockAPI.getUserNotifications,\n  markAsRead: mockAPI.markAsRead,\n  markAllAsRead: mockAPI.markAllAsRead,\n  deleteNotification: mockAPI.deleteNotification,\n  createNotification: mockAPI.createNotification\n};\nexport const assignmentService = {\n  getAssignments: mockAPI.getAssignments,\n  getAssignment: mockAPI.getAssignment,\n  getCourseAssignments: mockAPI.getCourseAssignments,\n  getStudentAssignments: mockAPI.getStudentAssignments,\n  createAssignment: mockAPI.createAssignment,\n  submitAssignment: mockAPI.submitAssignment,\n  gradeSubmission: mockAPI.gradeSubmission\n};\nexport const announcementService = {\n  getAnnouncements: mockAPI.getAnnouncements,\n  getAnnouncement: mockAPI.getAnnouncement,\n  createAnnouncement: mockAPI.createAnnouncement,\n  updateAnnouncement: mockAPI.updateAnnouncement,\n  deleteAnnouncement: mockAPI.deleteAnnouncement\n};\nexport default instance;","map":{"version":3,"names":["mockUsers","_id","name","email","role","mockCourses","code","title","description","instructor","semester","year","credits","students","mockGrades","studentId","course","grade","mockAttendance","totalClasses","present","absent","percentage","mockAssignments","dueDate","Date","totalMarks","createdBy","createdAt","submission","status","submittedAt","marks","mockEvents","date","location","organizer","rsvped","mockNotifications","message","type","sender","read","mockAnnouncements","content","mockPlacements","studentName","company","mockAPI","login","data","Promise","resolve","setTimeout","password","user","find","u","response","token","id","register","existingUser","newUser","length","push","getAllUsers","getProfile","JSON","parse","localStorage","getItem","foundUser","updateProfile","userIndex","findIndex","getStudents","filter","getFaculty","createUser","getUserById","updateUser","deleteUser","splice","getCourses","getAllCourses","getCourse","c","getCourseById","createCourse","existingCourse","newCourse","Number","parseInt","updateCourse","courseIndex","deleteCourse","enrollStudents","courseId","studentIds","includes","removeStudents","s","addCourseMaterial","materials","material","uploadedAt","getEvents","getEvent","event","e","createEvent","newEvent","attendees","updateEvent","eventIndex","rsvpEvent","getStudentAttendance","getStudentAttendanceStats","getCourseAttendance","attendance","a","markAttendance","getStudentGrades","g","getCourseGrades","addGrade","newGrade","updateGrade","gradeIndex","getPlacements","p","getAllPlacements","createPlacement","newPlacement","updatePlacement","placementIndex","deletePlacement","getUserNotifications","markAsRead","notificationId","notificationIndex","n","markAllAsRead","forEach","notification","deleteNotification","createNotification","newNotification","getAssignments","getAssignment","assignment","getCourseAssignments","getStudentAssignments","createAssignment","creator","newAssignment","submissions","submitAssignment","assignmentId","assignmentIndex","attachments","gradeSubmission","submissionId","feedback","getAnnouncements","getAnnouncement","announcement","createAnnouncement","newAnnouncement","updateAnnouncement","announcementIndex","deleteAnnouncement","instance","get","url","console","log","post","put","delete","authService","userService","courseService","eventService","deleteEvent","attendanceService","gradeService","placementService","notificationService","assignmentService","announcementService"],"sources":["D:/Projects/Smart_Campus_Portal/frontend/src/services/api.js"],"sourcesContent":["// Mock data for users\nconst mockUsers = [\n  { _id: \"1\", name: \"Admin User\", email: \"admin@edu.com\", role: \"admin\" },\n  { _id: \"2\", name: \"Dr. Smith\", email: \"faculty@edu.com\", role: \"faculty\" },\n  { _id: \"3\", name: \"John Doe\", email: \"student@edu.com\", role: \"student\" },\n  { _id: \"4\", name: \"Jane Smith\", email: \"jane@edu.com\", role: \"student\" },\n  { _id: \"5\", name: \"Bob Johnson\", email: \"bob@edu.com\", role: \"student\" },\n  { _id: \"6\", name: \"Dr. Williams\", email: \"williams@edu.com\", role: \"faculty\" },\n]\n\n// Mock data for courses\nconst mockCourses = [\n  {\n    _id: \"101\",\n    code: \"CS101\",\n    title: \"Introduction to Computer Science\",\n    description: \"A foundational course covering basic concepts in computer science.\",\n    instructor: { _id: \"2\", name: \"Dr. Smith\", email: \"faculty@edu.com\" },\n    semester: \"Fall\",\n    year: 2023,\n    credits: 3,\n    students: [\n      { _id: \"3\", name: \"John Doe\", email: \"student@edu.com\" },\n      { _id: \"4\", name: \"Jane Smith\", email: \"jane@edu.com\" },\n    ],\n  },\n  {\n    _id: \"102\",\n    code: \"CS201\",\n    title: \"Data Structures\",\n    description: \"Advanced course covering various data structures and their applications.\",\n    instructor: { _id: \"2\", name: \"Dr. Smith\", email: \"faculty@edu.com\" },\n    semester: \"Spring\",\n    year: 2023,\n    credits: 4,\n    students: [\n      { _id: \"3\", name: \"John Doe\", email: \"student@edu.com\" },\n      { _id: \"5\", name: \"Bob Johnson\", email: \"bob@edu.com\" },\n    ],\n  },\n  {\n    _id: \"103\",\n    code: \"CS301\",\n    title: \"Database Systems\",\n    description: \"Introduction to database design, implementation, and management.\",\n    instructor: { _id: \"6\", name: \"Dr. Williams\", email: \"williams@edu.com\" },\n    semester: \"Fall\",\n    year: 2023,\n    credits: 3,\n    students: [\n      { _id: \"4\", name: \"Jane Smith\", email: \"jane@edu.com\" },\n      { _id: \"5\", name: \"Bob Johnson\", email: \"bob@edu.com\" },\n    ],\n  },\n]\n\n// Mock data for grades\nconst mockGrades = [\n  { _id: \"g1\", studentId: \"3\", course: \"Introduction to Computer Science\", grade: \"A\", semester: \"Fall 2023\" },\n  { _id: \"g2\", studentId: \"3\", course: \"Data Structures\", grade: \"B+\", semester: \"Spring 2023\" },\n  { _id: \"g3\", studentId: \"4\", course: \"Introduction to Computer Science\", grade: \"A-\", semester: \"Fall 2023\" },\n  { _id: \"g4\", studentId: \"4\", course: \"Database Systems\", grade: \"B\", semester: \"Fall 2023\" },\n  { _id: \"g5\", studentId: \"5\", course: \"Data Structures\", grade: \"A\", semester: \"Spring 2023\" },\n  { _id: \"g6\", studentId: \"5\", course: \"Database Systems\", grade: \"B+\", semester: \"Fall 2023\" },\n]\n\n// Mock data for attendance\nconst mockAttendance = [\n  {\n    course: { _id: \"101\", code: \"CS101\", title: \"Introduction to Computer Science\" },\n    totalClasses: 15,\n    present: 14,\n    absent: 1,\n    percentage: 93,\n  },\n  {\n    course: { _id: \"102\", code: \"CS201\", title: \"Data Structures\" },\n    totalClasses: 12,\n    present: 10,\n    absent: 2,\n    percentage: 83,\n  },\n]\n\n// Mock data for assignments\nconst mockAssignments = [\n  {\n    _id: \"a1\",\n    title: \"Introduction to Programming\",\n    description: \"Write a simple program to calculate factorial of a number\",\n    course: { _id: \"101\", code: \"CS101\", title: \"Introduction to Computer Science\" },\n    dueDate: new Date(2023, 8, 30),\n    totalMarks: 20,\n    createdBy: { _id: \"2\", name: \"Dr. Smith\" },\n    createdAt: new Date(2023, 8, 15),\n    submission: null,\n    status: \"pending\",\n  },\n  {\n    _id: \"a2\",\n    title: \"Data Structures Implementation\",\n    description: \"Implement a linked list with basic operations\",\n    course: { _id: \"102\", code: \"CS201\", title: \"Data Structures\" },\n    dueDate: new Date(2023, 9, 15),\n    totalMarks: 30,\n    createdBy: { _id: \"2\", name: \"Dr. Smith\" },\n    createdAt: new Date(2023, 9, 1),\n    submission: {\n      status: \"submitted\",\n      submittedAt: new Date(2023, 9, 10),\n      marks: 25,\n    },\n    status: \"submitted\",\n  },\n  {\n    _id: \"a3\",\n    title: \"Database Design\",\n    description: \"Design a database schema for a library management system\",\n    course: { _id: \"103\", code: \"CS301\", title: \"Database Systems\" },\n    dueDate: new Date(2023, 10, 10),\n    totalMarks: 25,\n    createdBy: { _id: \"6\", name: \"Dr. Williams\" },\n    createdAt: new Date(2023, 10, 1),\n    submission: null,\n    status: \"pending\",\n  },\n]\n\n// Mock data for events\nconst mockEvents = [\n  {\n    _id: \"e1\",\n    title: \"Orientation Day\",\n    description: \"Welcome orientation for new students\",\n    date: new Date(2023, 8, 15, 10, 0),\n    location: \"Main Auditorium\",\n    organizer: { _id: \"1\", name: \"Admin User\" },\n    rsvped: true,\n  },\n  {\n    _id: \"e2\",\n    title: \"Tech Symposium\",\n    description: \"Annual technology symposium featuring guest speakers from industry\",\n    date: new Date(2023, 9, 20, 14, 0),\n    location: \"Conference Hall\",\n    organizer: { _id: \"2\", name: \"Dr. Smith\" },\n    rsvped: false,\n  },\n  {\n    _id: \"e3\",\n    title: \"Career Fair\",\n    description: \"Meet representatives from top companies\",\n    date: new Date(2023, 10, 5, 9, 0),\n    location: \"Sports Complex\",\n    organizer: { _id: \"6\", name: \"Dr. Williams\" },\n    rsvped: false,\n  },\n]\n\n// Mock data for notifications\nconst mockNotifications = [\n  {\n    _id: \"n1\",\n    title: \"Assignment Due\",\n    message: \"Reminder: Your CS101 assignment is due tomorrow\",\n    type: \"assignment\",\n    sender: { _id: \"2\", name: \"Dr. Smith\" },\n    read: false,\n    createdAt: new Date(2023, 8, 29),\n  },\n  {\n    _id: \"n2\",\n    title: \"Event Reminder\",\n    message: \"Don't forget about the Orientation Day tomorrow\",\n    type: \"event\",\n    sender: { _id: \"1\", name: \"Admin User\" },\n    read: false,\n    createdAt: new Date(2023, 8, 14),\n  },\n  {\n    _id: \"n3\",\n    title: \"Grade Posted\",\n    message: \"Your grade for CS201 has been posted\",\n    type: \"grade\",\n    sender: { _id: \"2\", name: \"Dr. Smith\" },\n    read: true,\n    createdAt: new Date(2023, 7, 20),\n  },\n  {\n    _id: \"n4\",\n    title: \"Course Enrollment\",\n    message: \"You have been enrolled in Database Systems\",\n    type: \"system\",\n    sender: { _id: \"1\", name: \"Admin User\" },\n    read: true,\n    createdAt: new Date(2023, 7, 15),\n  },\n  {\n    _id: \"n5\",\n    title: \"Attendance Warning\",\n    message: \"Your attendance in CS101 is below 85%\",\n    type: \"attendance\",\n    sender: { _id: \"2\", name: \"Dr. Smith\" },\n    read: false,\n    createdAt: new Date(2023, 8, 10),\n  },\n]\n\n// Mock data for announcements\nconst mockAnnouncements = [\n  {\n    _id: \"an1\",\n    title: \"Campus Closure\",\n    content: \"Campus will be closed on October 10th for maintenance\",\n    createdAt: new Date(2023, 9, 5),\n  },\n  {\n    _id: \"an2\",\n    title: \"New Library Hours\",\n    content: \"The library will now be open 24/7 during exam week\",\n    createdAt: new Date(2023, 8, 20),\n  },\n  {\n    _id: \"an3\",\n    title: \"Scholarship Applications\",\n    content: \"Scholarship applications for the next academic year are now open\",\n    createdAt: new Date(2023, 8, 15),\n  },\n]\n\n// Mock data for placements\nconst mockPlacements = [\n  {\n    _id: \"p1\",\n    studentId: \"3\",\n    studentName: \"John Doe\",\n    company: \"Google\",\n    role: \"Software Engineer\",\n    status: \"Placed\",\n  },\n  {\n    _id: \"p2\",\n    studentId: \"4\",\n    studentName: \"Jane Smith\",\n    company: \"Microsoft\",\n    role: \"Data Scientist\",\n    status: \"Interview\",\n  },\n  {\n    _id: \"p3\",\n    studentId: \"5\",\n    studentName: \"Bob Johnson\",\n    company: \"Amazon\",\n    role: \"Product Manager\",\n    status: \"Applied\",\n  },\n]\n\n// Mock API service\nconst mockAPI = {\n  // Auth services\n  login: async (data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    const { email, password } = data\n    const user = mockUsers.find((u) => u.email === email)\n\n    if (!user || password !== \"password\") {\n      throw { response: { data: { message: \"Invalid email or password\" } } }\n    }\n\n    return {\n      data: {\n        token: \"mock-jwt-token\",\n        user: {\n          id: user._id,\n          name: user.name,\n          email: user.email,\n          role: user.role,\n        },\n      },\n    }\n  },\n\n  register: async (data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    const { email } = data\n    const existingUser = mockUsers.find((u) => u.email === email)\n\n    if (existingUser) {\n      throw { response: { data: { message: \"User already exists\" } } }\n    }\n\n    const newUser = {\n      _id: `${mockUsers.length + 1}`,\n      ...data,\n    }\n\n    mockUsers.push(newUser)\n\n    return {\n      data: {\n        token: \"mock-jwt-token\",\n        user: {\n          id: newUser._id,\n          name: newUser.name,\n          email: newUser.email,\n          role: newUser.role,\n        },\n      },\n    }\n  },\n\n  // User services\n  getAllUsers: async () => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockUsers }\n  },\n\n  getProfile: async () => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n    const foundUser = mockUsers.find((u) => u.email === user.email)\n    return { data: foundUser }\n  },\n\n  updateProfile: async (data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n    const userIndex = mockUsers.findIndex((u) => u.email === user.email)\n\n    if (userIndex !== -1) {\n      mockUsers[userIndex] = { ...mockUsers[userIndex], ...data }\n      return { data: mockUsers[userIndex] }\n    }\n\n    throw { response: { data: { message: \"User not found\" } } }\n  },\n\n  getStudents: async () => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockUsers.filter((u) => u.role === \"student\") }\n  },\n\n  getFaculty: async () => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockUsers.filter((u) => u.role === \"faculty\") }\n  },\n\n  createUser: async (data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    const { email } = data\n    const existingUser = mockUsers.find((u) => u.email === email)\n\n    if (existingUser) {\n      throw { response: { data: { message: \"User already exists\" } } }\n    }\n\n    const newUser = {\n      _id: `${mockUsers.length + 1}`,\n      ...data,\n    }\n\n    mockUsers.push(newUser)\n    return { data: newUser }\n  },\n\n  getUserById: async (id) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const user = mockUsers.find((u) => u._id === id)\n\n    if (!user) {\n      throw { response: { data: { message: \"User not found\" } } }\n    }\n\n    return { data: user }\n  },\n\n  updateUser: async (id, data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const userIndex = mockUsers.findIndex((u) => u._id === id)\n\n    if (userIndex !== -1) {\n      mockUsers[userIndex] = { ...mockUsers[userIndex], ...data }\n      return { data: mockUsers[userIndex] }\n    }\n\n    throw { response: { data: { message: \"User not found\" } } }\n  },\n\n  deleteUser: async (id) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const userIndex = mockUsers.findIndex((u) => u._id === id)\n\n    if (userIndex !== -1) {\n      mockUsers.splice(userIndex, 1)\n      return { data: { message: \"User deleted successfully\" } }\n    }\n\n    throw { response: { data: { message: \"User not found\" } } }\n  },\n\n  // Course services\n  getCourses: async () => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockCourses }\n  },\n\n  getAllCourses: async () => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockCourses }\n  },\n\n  getCourse: async (id) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const course = mockCourses.find((c) => c._id === id)\n\n    if (!course) {\n      throw { response: { data: { message: \"Course not found\" } } }\n    }\n\n    return { data: course }\n  },\n\n  getCourseById: async (id) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const course = mockCourses.find((c) => c._id === id)\n\n    if (!course) {\n      throw { response: { data: { message: \"Course not found\" } } }\n    }\n\n    return { data: course }\n  },\n\n  createCourse: async (data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    const { code } = data\n    const existingCourse = mockCourses.find((c) => c.code === code)\n\n    if (existingCourse) {\n      throw { response: { data: { message: \"Course with this code already exists\" } } }\n    }\n\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n    const instructor = mockUsers.find((u) => u.email === user.email)\n\n    const newCourse = {\n      _id: `${Number.parseInt(mockCourses[mockCourses.length - 1]._id) + 1}`,\n      ...data,\n      instructor: {\n        _id: instructor._id,\n        name: instructor.name,\n        email: instructor.email,\n      },\n      students: [],\n    }\n\n    mockCourses.push(newCourse)\n    return { data: newCourse }\n  },\n\n  updateCourse: async (id, data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const courseIndex = mockCourses.findIndex((c) => c._id === id)\n\n    if (courseIndex !== -1) {\n      mockCourses[courseIndex] = { ...mockCourses[courseIndex], ...data }\n      return { data: mockCourses[courseIndex] }\n    }\n\n    throw { response: { data: { message: \"Course not found\" } } }\n  },\n\n  deleteCourse: async (id) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const courseIndex = mockCourses.findIndex((c) => c._id === id)\n\n    if (courseIndex !== -1) {\n      mockCourses.splice(courseIndex, 1)\n      return { data: { message: \"Course deleted successfully\" } }\n    }\n\n    throw { response: { data: { message: \"Course not found\" } } }\n  },\n\n  enrollStudents: async (courseId, studentIds) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const courseIndex = mockCourses.findIndex((c) => c._id === courseId)\n\n    if (courseIndex !== -1) {\n      const students = mockUsers.filter((u) => studentIds.includes(u._id))\n      mockCourses[courseIndex].students = students\n      return { data: { message: \"Students enrolled successfully\", course: mockCourses[courseIndex] } }\n    }\n\n    throw { response: { data: { message: \"Course not found\" } } }\n  },\n\n  removeStudents: async (courseId, studentIds) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const courseIndex = mockCourses.findIndex((c) => c._id === courseId)\n\n    if (courseIndex !== -1) {\n      mockCourses[courseIndex].students = mockCourses[courseIndex].students.filter((s) => !studentIds.includes(s._id))\n      return { data: { message: \"Students removed successfully\", course: mockCourses[courseIndex] } }\n    }\n\n    throw { response: { data: { message: \"Course not found\" } } }\n  },\n\n  addCourseMaterial: async (courseId, data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const courseIndex = mockCourses.findIndex((c) => c._id === courseId)\n\n    if (courseIndex !== -1) {\n      if (!mockCourses[courseIndex].materials) {\n        mockCourses[courseIndex].materials = []\n      }\n\n      const material = {\n        _id: `m${mockCourses[courseIndex].materials.length + 1}`,\n        ...data,\n        uploadedAt: new Date(),\n      }\n\n      mockCourses[courseIndex].materials.push(material)\n      return { data: { message: \"Material added successfully\", material } }\n    }\n\n    throw { response: { data: { message: \"Course not found\" } } }\n  },\n\n  // Event services\n  getEvents: async () => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockEvents }\n  },\n\n  getEvent: async (id) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const event = mockEvents.find((e) => e._id === id)\n\n    if (!event) {\n      throw { response: { data: { message: \"Event not found\" } } }\n    }\n\n    return { data: event }\n  },\n\n  createEvent: async (data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n    const organizer = mockUsers.find((u) => u.email === user.email)\n\n    const newEvent = {\n      _id: `e${mockEvents.length + 1}`,\n      ...data,\n      organizer: {\n        _id: organizer._id,\n        name: organizer.name,\n      },\n      attendees: [],\n      rsvped: false,\n    }\n\n    mockEvents.push(newEvent)\n    return { data: newEvent }\n  },\n\n  updateEvent: async (id, data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const eventIndex = mockEvents.findIndex((e) => e._id === id)\n\n    if (eventIndex !== -1) {\n      mockEvents[eventIndex] = { ...mockEvents[eventIndex], ...data }\n      return { data: mockEvents[eventIndex] }\n    }\n\n    throw { response: { data: { message: \"Event not found\" } } }\n  },\n\n  rsvpEvent: async (id) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const eventIndex = mockEvents.findIndex((e) => e._id === id)\n\n    if (eventIndex !== -1) {\n      mockEvents[eventIndex].rsvped = true\n      return { data: { message: \"RSVP successful\", event: mockEvents[eventIndex] } }\n    }\n\n    throw { response: { data: { message: \"Event not found\" } } }\n  },\n\n  // Attendance services\n  getStudentAttendance: async (studentId) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockAttendance }\n  },\n\n  getStudentAttendanceStats: async (studentId) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockAttendance }\n  },\n\n  getCourseAttendance: async (courseId, date) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const attendance = mockAttendance.find((a) => a.course._id === courseId)\n\n    if (!attendance) {\n      return { data: [] }\n    }\n\n    return { data: [attendance] }\n  },\n\n  markAttendance: async (courseId, data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: { message: \"Attendance marked successfully\" } }\n  },\n\n  // Grade services\n  getStudentGrades: async (studentId) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockGrades.filter((g) => g.studentId === studentId) }\n  },\n\n  getCourseGrades: async (courseId) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const course = mockCourses.find((c) => c._id === courseId)\n\n    if (!course) {\n      throw { response: { data: { message: \"Course not found\" } } }\n    }\n\n    return { data: mockGrades.filter((g) => g.course === course.title) }\n  },\n\n  addGrade: async (data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    const newGrade = {\n      _id: `g${mockGrades.length + 1}`,\n      ...data,\n    }\n\n    mockGrades.push(newGrade)\n    return { data: newGrade }\n  },\n\n  updateGrade: async (id, data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const gradeIndex = mockGrades.findIndex((g) => g._id === id)\n\n    if (gradeIndex !== -1) {\n      mockGrades[gradeIndex] = { ...mockGrades[gradeIndex], ...data }\n      return { data: mockGrades[gradeIndex] }\n    }\n\n    throw { response: { data: { message: \"Grade not found\" } } }\n  },\n\n  // Placement services\n  getPlacements: async (studentId) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockPlacements.filter((p) => p.studentId === studentId) }\n  },\n\n  getAllPlacements: async () => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockPlacements }\n  },\n\n  createPlacement: async (data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    const newPlacement = {\n      _id: `p${mockPlacements.length + 1}`,\n      ...data,\n    }\n\n    mockPlacements.push(newPlacement)\n    return { data: newPlacement }\n  },\n\n  updatePlacement: async (id, data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const placementIndex = mockPlacements.findIndex((p) => p._id === id)\n\n    if (placementIndex !== -1) {\n      mockPlacements[placementIndex] = { ...mockPlacements[placementIndex], ...data }\n      return { data: mockPlacements[placementIndex] }\n    }\n\n    throw { response: { data: { message: \"Placement not found\" } } }\n  },\n\n  deletePlacement: async (id) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const placementIndex = mockPlacements.findIndex((p) => p._id === id)\n\n    if (placementIndex !== -1) {\n      mockPlacements.splice(placementIndex, 1)\n      return { data: { message: \"Placement deleted successfully\" } }\n    }\n\n    throw { response: { data: { message: \"Placement not found\" } } }\n  },\n\n  // Notification services\n  getUserNotifications: async () => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockNotifications }\n  },\n\n  markAsRead: async (notificationId) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const notificationIndex = mockNotifications.findIndex((n) => n._id === notificationId)\n\n    if (notificationIndex !== -1) {\n      mockNotifications[notificationIndex].read = true\n      return { data: { message: \"Notification marked as read\" } }\n    }\n\n    throw { response: { data: { message: \"Notification not found\" } } }\n  },\n\n  markAllAsRead: async () => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    mockNotifications.forEach((notification) => {\n      notification.read = true\n    })\n    return { data: { message: \"All notifications marked as read\" } }\n  },\n\n  deleteNotification: async (notificationId) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const notificationIndex = mockNotifications.findIndex((n) => n._id === notificationId)\n\n    if (notificationIndex !== -1) {\n      mockNotifications.splice(notificationIndex, 1)\n      return { data: { message: \"Notification deleted successfully\" } }\n    }\n\n    throw { response: { data: { message: \"Notification not found\" } } }\n  },\n\n  createNotification: async (data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n    const sender = mockUsers.find((u) => u.email === user.email)\n\n    const newNotification = {\n      _id: `n${mockNotifications.length + 1}`,\n      ...data,\n      sender: {\n        _id: sender._id,\n        name: sender.name,\n      },\n      read: false,\n      createdAt: new Date(),\n    }\n\n    mockNotifications.push(newNotification)\n    return { data: newNotification }\n  },\n\n  // Assignment services\n  getAssignments: async () => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockAssignments }\n  },\n\n  getAssignment: async (id) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const assignment = mockAssignments.find((a) => a._id === id)\n\n    if (!assignment) {\n      throw { response: { data: { message: \"Assignment not found\" } } }\n    }\n\n    return { data: assignment }\n  },\n\n  getCourseAssignments: async (courseId) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockAssignments.filter((a) => a.course._id === courseId) }\n  },\n\n  getStudentAssignments: async (studentId) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockAssignments }\n  },\n\n  createAssignment: async (data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n    const creator = mockUsers.find((u) => u.email === user.email)\n    const course = mockCourses.find((c) => c._id === data.courseId)\n\n    if (!course) {\n      throw { response: { data: { message: \"Course not found\" } } }\n    }\n\n    const newAssignment = {\n      _id: `a${mockAssignments.length + 1}`,\n      title: data.title,\n      description: data.description,\n      course: {\n        _id: course._id,\n        code: course.code,\n        title: course.title,\n      },\n      dueDate: data.dueDate,\n      totalMarks: data.totalMarks,\n      createdBy: {\n        _id: creator._id,\n        name: creator.name,\n      },\n      createdAt: new Date(),\n      submissions: [],\n      status: \"pending\",\n    }\n\n    mockAssignments.push(newAssignment)\n    return { data: newAssignment }\n  },\n\n  submitAssignment: async (assignmentId, data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const assignmentIndex = mockAssignments.findIndex((a) => a._id === assignmentId)\n\n    if (assignmentIndex !== -1) {\n      mockAssignments[assignmentIndex].submission = {\n        status: \"submitted\",\n        submittedAt: new Date(),\n        content: data.content,\n        attachments: data.attachments || [],\n      }\n      mockAssignments[assignmentIndex].status = \"submitted\"\n\n      return { data: { message: \"Assignment submitted successfully\" } }\n    }\n\n    throw { response: { data: { message: \"Assignment not found\" } } }\n  },\n\n  gradeSubmission: async (assignmentId, submissionId, data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const assignmentIndex = mockAssignments.findIndex((a) => a._id === assignmentId)\n\n    if (assignmentIndex !== -1 && mockAssignments[assignmentIndex].submission) {\n      mockAssignments[assignmentIndex].submission.marks = data.marks\n      mockAssignments[assignmentIndex].submission.feedback = data.feedback\n      mockAssignments[assignmentIndex].submission.status = \"graded\"\n      mockAssignments[assignmentIndex].status = \"graded\"\n\n      return { data: { message: \"Submission graded successfully\" } }\n    }\n\n    throw { response: { data: { message: \"Assignment or submission not found\" } } }\n  },\n\n  // Announcement services\n  getAnnouncements: async () => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return { data: mockAnnouncements }\n  },\n\n  getAnnouncement: async (id) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const announcement = mockAnnouncements.find((a) => a._id === id)\n\n    if (!announcement) {\n      throw { response: { data: { message: \"Announcement not found\" } } }\n    }\n\n    return { data: announcement }\n  },\n\n  createAnnouncement: async (data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    const newAnnouncement = {\n      _id: `an${mockAnnouncements.length + 1}`,\n      ...data,\n      createdAt: new Date(),\n    }\n\n    mockAnnouncements.push(newAnnouncement)\n    return { data: newAnnouncement }\n  },\n\n  updateAnnouncement: async (id, data) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const announcementIndex = mockAnnouncements.findIndex((a) => a._id === id)\n\n    if (announcementIndex !== -1) {\n      mockAnnouncements[announcementIndex] = { ...mockAnnouncements[announcementIndex], ...data }\n      return { data: mockAnnouncements[announcementIndex] }\n    }\n\n    throw { response: { data: { message: \"Announcement not found\" } } }\n  },\n\n  deleteAnnouncement: async (id) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    const announcementIndex = mockAnnouncements.findIndex((a) => a._id === id)\n\n    if (announcementIndex !== -1) {\n      mockAnnouncements.splice(announcementIndex, 1)\n      return { data: { message: \"Announcement deleted successfully\" } }\n    }\n\n    throw { response: { data: { message: \"Announcement not found\" } } }\n  },\n}\n\n// Create a real-looking axios instance that uses our mock data\nconst instance = {\n  get: (url) => {\n    console.log(`Mock GET request to: ${url}`)\n    return Promise.resolve({ data: [] })\n  },\n  post: (url, data) => {\n    console.log(`Mock POST request to: ${url}`, data)\n    return Promise.resolve({ data: {} })\n  },\n  put: (url, data) => {\n    console.log(`Mock PUT request to: ${url}`, data)\n    return Promise.resolve({ data: {} })\n  },\n  delete: (url) => {\n    console.log(`Mock DELETE request to: ${url}`)\n    return Promise.resolve({ data: {} })\n  },\n}\n\n// Export the services\nexport const authService = {\n  login: mockAPI.login,\n  register: mockAPI.register,\n}\n\nexport const userService = {\n  getAllUsers: mockAPI.getAllUsers,\n  getProfile: mockAPI.getProfile,\n  updateProfile: mockAPI.updateProfile,\n  getStudents: mockAPI.getStudents,\n  getFaculty: mockAPI.getFaculty,\n  createUser: mockAPI.createUser,\n  getUserById: mockAPI.getUserById,\n  updateUser: mockAPI.updateUser,\n  deleteUser: mockAPI.deleteUser,\n}\n\nexport const courseService = {\n  getCourses: mockAPI.getCourses,\n  getAllCourses: mockAPI.getAllCourses,\n  getCourse: mockAPI.getCourse,\n  getCourseById: mockAPI.getCourseById,\n  createCourse: mockAPI.createCourse,\n  updateCourse: mockAPI.updateCourse,\n  deleteCourse: mockAPI.deleteCourse,\n  enrollStudents: mockAPI.enrollStudents,\n  removeStudents: mockAPI.removeStudents,\n  addCourseMaterial: mockAPI.addCourseMaterial,\n  getCourseAttendance: mockAPI.getCourseAttendance,\n  markAttendance: mockAPI.markAttendance,\n}\n\nexport const eventService = {\n  getEvents: mockAPI.getEvents,\n  getEvent: mockAPI.getEvent,\n  createEvent: mockAPI.createEvent,\n  updateEvent: mockAPI.updateEvent,\n  deleteEvent: mockAPI.deleteEvent,\n  rsvpEvent: mockAPI.rsvpEvent,\n}\n\nexport const attendanceService = {\n  getStudentAttendance: mockAPI.getStudentAttendance,\n  getStudentAttendanceStats: mockAPI.getStudentAttendanceStats,\n  getCourseAttendance: mockAPI.getCourseAttendance,\n  markAttendance: mockAPI.markAttendance,\n}\n\nexport const gradeService = {\n  getStudentGrades: mockAPI.getStudentGrades,\n  getCourseGrades: mockAPI.getCourseGrades,\n  addGrade: mockAPI.addGrade,\n  updateGrade: mockAPI.updateGrade,\n}\n\nexport const placementService = {\n  getPlacements: mockAPI.getPlacements,\n  getAllPlacements: mockAPI.getAllPlacements,\n  createPlacement: mockAPI.createPlacement,\n  updatePlacement: mockAPI.updatePlacement,\n  deletePlacement: mockAPI.deletePlacement,\n}\n\nexport const notificationService = {\n  getUserNotifications: mockAPI.getUserNotifications,\n  markAsRead: mockAPI.markAsRead,\n  markAllAsRead: mockAPI.markAllAsRead,\n  deleteNotification: mockAPI.deleteNotification,\n  createNotification: mockAPI.createNotification,\n}\n\nexport const assignmentService = {\n  getAssignments: mockAPI.getAssignments,\n  getAssignment: mockAPI.getAssignment,\n  getCourseAssignments: mockAPI.getCourseAssignments,\n  getStudentAssignments: mockAPI.getStudentAssignments,\n  createAssignment: mockAPI.createAssignment,\n  submitAssignment: mockAPI.submitAssignment,\n  gradeSubmission: mockAPI.gradeSubmission,\n}\n\nexport const announcementService = {\n  getAnnouncements: mockAPI.getAnnouncements,\n  getAnnouncement: mockAPI.getAnnouncement,\n  createAnnouncement: mockAPI.createAnnouncement,\n  updateAnnouncement: mockAPI.updateAnnouncement,\n  deleteAnnouncement: mockAPI.deleteAnnouncement,\n}\n\nexport default instance\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}